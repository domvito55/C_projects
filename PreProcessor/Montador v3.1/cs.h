/*
Paths and Names of the Source Files

 Before any other stabs occur, there must be a stab specifying the source file.
 This information is contained in a symbol of stab type N_SO; the string field
 contains the name of the file. The value of the symbol is the start address
 of the portion of the text section corresponding to that file.

With the Sun Solaris2 compiler, the desc field contains a source-language code.

Some compilers (for example, GCC2 and SunOS4 `/bin/cc') also include the 
directory in which the source was compiled, in a second N_SO symbol preceding 
the one containing the file name. This symbol can be distinguished by the fact
 that it ends in a slash. Code from the cfront C++ compiler can have additional
 N_SO symbols for nonexistent source files after the N_SO for the real source 
 file; these are believed to contain no useful information.

For example:

.stabs "/cygint/s1/users/jcm/play/",100,0,0,Ltext0     # 100 is N_SO
.stabs "hello.c",100,0,0,Ltext0
        .text
Ltext0:
Instead of N_SO symbols, XCOFF uses a .file assembler directive which assembles
 to a standard COFF .file symbol; explaining this in detail is outside the 
 scope of this document.
 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 
 The following example shows a stab for a function main which returns type 
 number 1. The _main specified for the value is a reference to an assembler 
 label which is used to fill in the start address of the function.

.stabs "main:F1",36,0,0,_main      # 36 is N_FUN

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

Each time the assembler encounters a stab directive, it puts each field of 
the stab into a corresponding field in a symbol table entry of its output 
file. If the stab contains a string field, the symbol table entry for that 
stab points to a string table entry containing the string data from the stab. Assembler labels become relocatable addresses. Symbol table entries in a.out have the format:
*/

typedef struct internal_nlist {
	unsigned long n_strx;         /* index into string table of name */
	unsigned char n_type;         /* type of symbol */
	unsigned char n_other;        /* misc info (usually empty) */
	unsigned short n_desc;        /* description field */
	unsigned long n_value;        /* value of symbol */
	struct internal_nlist* next;  /* pointer to the next stab*/
}Stab;

#define STAB_SIZE ((sizeof(Stab))-(sizeof(struct internal_nlist*))) 

/*
If the stab has a string, the n_strx field holds the offset in bytes of the
 string within the string table. The string is terminated by a NUL character. If the stab lacks a string (for example, it was produced by a .stabn or .stabd directive), the n_strx field is zero.

Symbol table entries with n_type field values greater than 0x1f originated 
as stabs generated by the compiler (with one random exception). The other 
entries were placed in the symbol table of the executable by the assembler 
or the linker.

The first stab in the .stab section for each compilation unit is synthetic,
generated entirely by the assembler, with no corresponding .stab directive
as input to the assembler. This stab contains the following fields:

n_strx
Offset in the .stabstr section to the source filename.
n_type
N_UNDF.
n_other
Unused field, always zero.
n_desc
Count of upcoming symbols, i.e., the number of remaining stabs for this 
source file.
n_value
Size of the string table fragment associated with this source file, in bytes.

The .stabstr section always starts with a null byte (so that string offsets 
of zero reference a null string), followed by random length strings, each 
of which is null byte terminated.

The ELF section header for the .stab section has its sh_link member set 
to the section number of the .stabstr section, and the .stabstr section 
has its ELF section header sh_type member set to SHT_STRTAB to mark it as
a string table. 
*/ 
#define N_GSYM 0x20  /*Global symbol; see section Global Variables.*/
#define N_FUN 0x24  /*Function name (see section Procedures) or text segment variable 
(see section Static Variables).*/
#define N_STSYM 0x26 /*Data segment file-scope variable; see section Static Variables.*/
#define N_MAIN 0x2a /*Name of main routine; see section Main Program.*/
